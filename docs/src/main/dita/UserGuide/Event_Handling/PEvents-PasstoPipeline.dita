<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_sbh_fcy_t1b">
 <title>Pass to Another Pipeline</title>
 <conbody>
  <p><indexterm>pipeline events<indexterm>passing to another pipeline</indexterm></indexterm>Pass
            pipeline events to another pipeline to perform more complex processing than simply
            passing the event to a single consumer. The event-consuming pipeline must use the SDC
            RPC origin, then can include as many other stages as you require. </p>
        <note>When you pass a pipeline event to another pipeline, the event-consuming pipeline does
            not report processing failures back to the event-generating pipeline automatically. For
            example, if you pass a pipeline event to a pipeline that has an executor that fails to
            complete its task, the failure is not reported back to the event-generating
            pipeline.</note>
        <p>To achieve the same behavior as passing to an executor, where a processing failure causes
            the event-generating pipeline to fail, configure the relevant stages to stop the
            event-consuming pipeline upon error. Upon error, the event-consuming pipeline then stops
            and passes the message back to the event-generating pipeline, which then transitions to
            a failure state.</p>
        <p>For example, say you pass a pipeline event to a pipeline that routes the event to two
            executors. To ensure that the event-generating pipeline fails if either of the executors
            fail, configure the On Record Error property on the General tab of both executors,
            setting the property to Stop Pipeline. </p>
        <p>This causes the event-consuming pipeline to stop on error, which causes the
            event-generating pipeline to transition to a failure state.</p>
        <p>To pass an event to another pipeline, perform the following steps:<ol id="ol_uvt_pgy_t1b">
                <li>Configure the pipeline to consume the event.</li>
                <li>Configure the event-generating pipeline to pass the event to the event-consuming
                    pipeline, including details from the SDC RPC origin.</li>
                <li>Start the event-consuming pipeline before you start the event-generating
                    pipeline.</li>
            </ol></p>
        <section id="section_bwq_pjj_v1b">
            <title>Example</title>
            <p>Say you want the Stop event to trigger a shell script that kicks off another process
                and a JDBC query. To do this, first configure the event-consuming pipeline. Use an
                SDC RPC origin and note the highlighted properties, because you will use them to
                configure the event-generating pipeline: </p>
            <p><image href="../Graphics/PEvents-AnotherPipe.png" id="image_llr_cxx_t1b" scale="65"
                /></p>
            <p>Then you configure the event-generating pipeline to pass the Stop event to your new
                pipeline. Note that if you don't need to use the Start event, you can simply use the
                default discard option:</p>
            <p><image href="../Graphics/PEvent-StopEventConfig.png" id="image_ugk_sxx_t1b"
                    scale="60"/></p>
            <p>Then you configure the Stop Event - Write to Another Pipeline properties, using the
                SDC RPC details from your event-consuming pipeline: </p>
            <p><image href="../Graphics/PEvent-Stop-PipelineConfig.png" id="image_wb5_fyx_t1b"
                    scale="60"/></p>
        </section>
 </conbody>
</concept>
