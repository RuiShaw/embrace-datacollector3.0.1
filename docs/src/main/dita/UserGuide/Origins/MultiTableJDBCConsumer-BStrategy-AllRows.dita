<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_e4d_fg3_v1b">
 <title>Process All Available Rows</title>
 <conbody>
  <p>The Process All Available Rows from the Table batch strategy differs slightly depending on
            whether the origin is processing full tables or partitions within a table. <dl>
                <dlentry>
                    <dt>Multithreaded table processing</dt>
                    <dd>
                        <p>When the origin performs multithreaded table processing for all tables,
                            each thread creates multiple batches of data from one table, until all
                            available rows are read from that table.</p>
                        <p>The thread runs one SQL query for all batches created from the table.
                            Then, the thread switches to the next available table, running another
                            SQL query to read all available rows from that table.</p>
                        <p>For example, let's say the origin has batch size of 100 and uses two
                            concurrent threads to read from four tables, each of which contains
                            1,000 rows. The first thread runs a SQL query to create 10 batches of
                            100 rows each from table1, while the second thread uses the same
                            strategy to read data from table2. </p>
                        <p>When table1 and table2 are fully read, the threads switch to table3 and
                            table4 and complete the same process. When the first thread finishes
                            reading from table3, the thread switches back to the next available
                            table to read all available data from the last saved offset.</p>
                        <p>The number of threads that can process the tables is limited by the
                            Number of Threads property for the origin. </p>
                        <p>When the tables being processed use both table and partition processing,
                            the threads query the partitions as described below. For details on how
                            the tables and partitions rotate through the processing queue, see <xref
                                href="MultiTableJDBCConsumer-ProcessingQueue.dita#concept_czt_ql2_r1b"
                            />.</p>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt>Multithreaded partition processing</dt>
                    <dd><p>Multithreaded partition processing is similar to multithreaded table
                            processing, except that it works at a partition level.</p><p>Each thread
                            creates multiple batches of data from one partition. The number of
                            batches that it creates and processes at one time is based on the
                            Batches from Result Set property. </p>Each thread runs one SQL query for
                        the batches to be created from the partition. Then, the thread switches to
                        the next available partition, running another SQL query.<p>For example, if
                            you set the Batches from Result Set property to 3, a thread runs a query
                            to create 3 batches of data from the partition that it processes. When
                            it completes processing the three batches, it becomes available to
                            process the next partition or table in the processing queue.</p><p>The
                            number of threads that can process partitions for each table is limited
                            by the Number of Threads property for the origin and the Max Active
                            Partitions table property. </p><p>For details on how the tables and
                            partitions rotate through the processing queue, see <xref
                                href="MultiTableJDBCConsumer-ProcessingQueue.dita#concept_czt_ql2_r1b"
                            />.</p></dd>
                </dlentry>
            </dl></p>
 </conbody>
</concept>
