<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_amq_qg3_v1b">
 <title>Switch Tables</title>
 <conbody>
  <p>The Switch Tables batch strategy differs greatly depending on whether the origin performs full
            table or partition processing. The number of batches created and processed at one time
            is based on the Batches from Result Set property. <dl>
                <dlentry>
                    <dt>Multithreaded table processing</dt>
                    <dd>
                        <p>When the origin performs multithreaded table processing for all tables,
                            each thread creates a set of batches from one table, and then switches
                            to the next available table to create the next set of batches.</p>
                        <p>The thread runs an initial SQL query to create the first set of batches
                            from the table. The database caches the remaining rows in a result set
                            in the database for the same thread to access again, and then the thread
                            switches to the next available table. A table is available in the
                            following situations:<ul id="ul_s1h_wg3_v1b">
                                <li>The table does not have an open result set cache. In this case,
                                    the thread runs an initial SQL query to create the first batch,
                                    caching the remaining rows in a result set in the database.</li>
                                <li>The table has an open result set cache created by that same
                                    thread. In this case, the thread creates the batch from the
                                    result set cache in the database rather than running another SQL
                                    query. </li>
                            </ul></p>
                        <p>A table is not available when the table has an open result set cache
                            created by another thread. No other thread can read from that table
                            until the result set is closed. </p>
                        <p>When you configure a switch table strategy, define the result set cache
                            size and the number of batches that a thread can create from the result
                            set. After a thread creates the configured number of batches, a
                            different thread can read from the table.<note>By default, the origin
                                instructs the database to cache an unlimited number of result sets.
                                A thread can create an unlimited number of batches from that result
                                set.</note></p>
                        <p>For example, let's say an origin has a batch size of 100 and uses two
                            concurrent threads and to read from four tables, each of which contains
                            10,000 rows. You set the result set cache size to 500 and set the number
                            of batches read from the result set to 5. </p>
                        <p>Thread1 runs an SQL query on table1, which returns all 10,000 rows. The
                            thread creates a batch when it reads the first 100 rows. The next 400
                            rows are cached as a result set in the database. Since thread2 is
                            similarly processing table2, thread1 switches to the next available
                            table, table3, and repeats the same process. After creating a batch from
                            table3, thread1 switches back to table1 and retrieves the next batch of
                            rows from the result set that it previously cached in the database.</p>
                        <p>After thread1 creates five batches using the result set cache for table1.
                            Thread1 then switches to the next available table. A different thread
                            runs an SQL query to read additional rows from table1, beginning from
                            the last saved offset.</p>
                        <p>When the tables being processed use both table and partition processing,
                            the threads query the partitions as described below. For details on how
                            the tables and partitions rotate through the processing queue, see <xref
                                href="MultiTableJDBCConsumer-ProcessingQueue.dita#concept_czt_ql2_r1b"
                            />.</p>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt>Multithreaded partition processing</dt>
                    <dd>
                        <p>Multithreaded partition processing is similar to multithreaded table
                            processing, with a twist - each thread creates a set of batches from one
                            partition for a table, then all partitions from the same table are moved
                            to the end of the processing queue. This allows the origin to switch to
                            the next available table.</p>
                        <p>The behavior around caching the result set and the number of batches to
                            process from the result set is the same, but at a partition level. </p>
                        <p>For examples of how tables and partitions rotate through the processing
                            queue, see <xref
                                href="MultiTableJDBCConsumer-ProcessingQueue.dita#concept_czt_ql2_r1b"
                            />.</p>
                    </dd>
                </dlentry>
            </dl></p>
 </conbody>
</concept>
